{"version":3,"sources":["reducers/Reducers.js","reducers/index.js","actions/types.js","store/index.js","components/searchForm.js","actions/fetchAction.js","components/pin.js","components/pinContainer.js","components/spinner.js","components/landingPage.js","App.js","serviceWorker.js","index.js","components/spinner_ex.gif"],"names":["initialState","searchText","pins","loading","pin","combineReducers","state","action","type","payload","fetchReducer","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","connect","searchPin","text","dispatch","fetchPins","search","gallery","axios","get","then","response","console","log","setTimeout","data","forEach","image","title","toLowerCase","includes","author","push","catch","err","setLoading","props","useEffect","direction","style","whiteSpace","onSubmit","e","preventDefault","TextField","id","label","placeholder","onChange","target","value","length","defaultValue","inputValue","Pin","Card","CardActionArea","CardMedia","height","width","CardContent","Typography","gutterBottom","variant","useStyles","makeStyles","theme","root","flexGrow","padding","spacing","classes","map","idx","key","Grid","className","container","justify","alignItems","Spinner","src","spinner","alt","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.b1b56da9.chunk.js","sourcesContent":["import { SEARCH_PIN } from '../actions/types'\r\nimport { FETCH_PINS} from '../actions/types'\r\nimport { LOADING} from '../actions/types'\r\n\r\nconst initialState = {\r\n  searchText: '',\r\n  pins: [],\r\n  loading: false,\r\n  pin: []\r\n}\r\nexport const inputReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SEARCH_PIN:\r\n      return {\r\n        ...state,\r\n        //assigns state of text field\r\n        searchText: action.payload,\r\n      }\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n      case FETCH_PINS:\r\n        return {\r\n          ...state,\r\n          //assigns state of pins array\r\n          loading: false\r\n        }   \r\n    default:\r\n      return state\r\n\r\n  }\r\n}\r\n\r\n\r\nexport const fetchReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_PINS:\r\n      return {\r\n        ...state,\r\n        //assigns state of pins array\r\n        pins: action.payload,\r\n        loading: false\r\n      }   \r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n","import {inputReducer, fetchReducer} from './Reducers'\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n    pins: inputReducer, fetchReducer\r\n});\r\n\r\n\r\n","export const SEARCH_PIN = 'SEARCH_PIN'\r\nexport const FETCH_PINS = 'FETCH_PINS'\r\nexport const LOADING = 'LOADING'\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport rootReducer from '../reducers';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\r\n\r\nconst middleware = [thunk];\r\nconst initialState = {}\r\n\r\nconst store = createStore( rootReducer, initialState, \r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {searchPin, fetchPins, setLoading} from \"../actions/fetchAction\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchText: state.pins.searchText\r\n})\r\n\r\nfunction SearchForm(props) {\r\n\r\n  useEffect(() => {\r\n    props.fetchPins(props.searchText)\r\n  })\r\n\r\n  // sets search state to input value, call fetchPins here for auto fetch on input change\r\n  const handleChange = (e) => {\r\n    e.preventDefault()\r\n    if (e.target.value.length > 3 ){\r\n      props.searchPin(e.target.value);\r\n      props.setLoading();\r\n      props.fetchPins(props.searchText)\r\n    }\r\n    else{\r\n      return\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    props.fetchPins(props.searchText)\r\n    props.setLoading();\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div direction=\"row\" style={{ whiteSpace: 'nowrap'}}>\r\n      &nbsp;\r\n      <form onSubmit = {handleSubmit}>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"Search Pins\"\r\n          placeholder=\"Find You\"\r\n          onChange={handleChange}\r\n          defaultValue={props.inputValue}\r\n        />\r\n        <p>{props.inputValue}</p>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, {searchPin, fetchPins, setLoading})(SearchForm);\r\n\r\n","import { SEARCH_PIN } from \"./types\";\r\nimport { FETCH_PINS } from \"./types\";\r\nimport { LOADING } from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nexport const searchPin = (text) => (dispatch) => {\r\n  dispatch({\r\n    type: SEARCH_PIN,\r\n    payload: text,\r\n  });\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return {\r\n    type: LOADING\r\n  }\r\n}\r\n\r\nexport const fetchPins = (search) => (dispatch) => {\r\n  // initialize gallery in the beginning so it empties each call\r\n  let gallery = []\r\n  axios\r\n    .get(\r\n      // `https://api.unsplash.com/search/photos?page=1&per_page=100&client_id=NtL294oB-F0DzGplMDDWZB-sx5pb3TwXEg4h3nIOI1I&query=${search}`\r\n      '/api/pins'\r\n    )\r\n    .then((response) => {\r\n      console.log(response)\r\n      setTimeout(() => {\r\n      // initialize array for pins\r\n      response.data.forEach(image => {\r\n        // checks if search results contain title OR username\r\n        if ((image.title).toLowerCase().includes(search.toLowerCase()) || (image.author).toLowerCase().includes(search.toLowerCase())\r\n           ) {\r\n             gallery.push(image)\r\n            //  gallery.push(image)\r\n          }\r\n        })\r\n        dispatch({\r\n          type: FETCH_PINS,\r\n          // EVERYTHING IS IMMUTABLE\r\n          payload: gallery,\r\n        });\r\n      }, 1500)\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n","import \"gestalt/dist/gestalt.css\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nfunction Pin(props) {\r\n    const pin = props;\r\n    return(\r\n            <Card\r\n            >\r\n               <CardActionArea>\r\n                   <CardMedia\r\n                   style={{height: \"200px\", width: \"200px\"}}\r\n                   image={pin.pins.image}\r\n                   title={pin.pins.title}\r\n                   />\r\n                   <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\">\r\n                            {pin.pins.title}\r\n                        </Typography>\r\n                        <Typography>\r\n                            {pin.pins.author}\r\n                        </Typography>\r\n\r\n\r\n                   </CardContent>\r\n\r\n               </CardActionArea>\r\n            </Card>\r\n            \r\n    );\r\n        \r\n}\r\nexport default Pin;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Pin from \"./pin\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(5)\r\n    }\r\n}))\r\n\r\nconst mapStateToProps = (state) => ({\r\n  pins: state.fetchReducer.pins,\r\n});\r\n\r\nfunction PinContainer(props) {\r\n  const classes = useStyles();\r\n  const { pins } = props;\r\n  let gallery = \"\";\r\n  gallery = pins.map((pin, idx) => <Pin key={idx} pins={pin} />);\r\n  return <Grid\r\n        className={classes.root}\r\n        container\r\n        spacing={5}\r\n        direction=\"row\"\r\n        justify=\"flex-start\"\r\n        alignItems=\"flex-start\"\r\n        >\r\n        {gallery}\r\n        </Grid>\r\n}\r\n\r\nexport default connect(mapStateToProps)(PinContainer);\r\n","import React from 'react'\r\nimport spinner from './spinner_ex.gif'\r\n\r\n\r\nfunction Spinner() {\r\n    return(\r\n        <div>\r\n            <img\r\n            src = {spinner}\r\n            alt=\"Loading......\"\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport SearchForm from './searchForm';\r\nimport {Provider, connect} from 'react-redux';\r\nimport PinContainer from './pinContainer';\r\nimport Spinner from './spinner'\r\n\r\nconst mapStateToProps = state => ({\r\n    loading: state.pins.loading\r\n  })\r\n\r\nfunction LandingPage(props) {\r\n    const loading = props.loading\r\n    return(\r\n        <div>\r\n            <SearchForm />\r\n            {loading ? <Spinner/> : <PinContainer/> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps)(LandingPage);","import React from 'react';\nimport {Provider, connect} from 'react-redux';\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo';\nimport store from './store/';\nimport LandingPage from './components/landingPage'\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:8080/graphql/pins',\n});\n\nfunction App(props) {\n  const loading = props.loading\n  return (\n    //lol\n    <div>\n    <ApolloProvider client = {client}>\n      <Provider store = {store}>\n        <LandingPage/>\n      </Provider>\n    </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/spinner_ex.dc252b3b.gif\";"],"sourceRoot":""}